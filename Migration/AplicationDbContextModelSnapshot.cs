// <auto-generated />
using System;
using ChallengeAlternativo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChallengeAlternativo.primera
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChallengeAlternativo.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeographicIconsId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeographicIconsId");

                    b.ToTable("continents");
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Habitants")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.GeographicIcons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Denomination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("GeographicIcons");
                });

            modelBuilder.Entity("ContinentCountry", b =>
                {
                    b.Property<int>("ContinentId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("ContinentId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ContinentCountry");
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.Continent", b =>
                {
                    b.HasOne("ChallengeAlternativo.Models.GeographicIcons", null)
                        .WithMany("Continent")
                        .HasForeignKey("GeographicIconsId");
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.GeographicIcons", b =>
                {
                    b.HasOne("ChallengeAlternativo.Models.Country", null)
                        .WithMany("GeographicIcons")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("ContinentCountry", b =>
                {
                    b.HasOne("ChallengeAlternativo.Models.Continent", null)
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChallengeAlternativo.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.Country", b =>
                {
                    b.Navigation("GeographicIcons");
                });

            modelBuilder.Entity("ChallengeAlternativo.Models.GeographicIcons", b =>
                {
                    b.Navigation("Continent");
                });
#pragma warning restore 612, 618
        }
    }
}
